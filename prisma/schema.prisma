// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String?  @unique
  avatar        String?
  walletAddress String?  @unique
  role          Role     @default(MEMBER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  createdTasks  Task[]   @relation("TaskCreator")
  assignedTasks Task[]   @relation("TaskAssignee")
  comments      Comment[]
  
  @@map("users")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Foreign Keys
  creatorId   String
  assigneeId  String?
  projectId   String?
  
  // Relations
  creator     User      @relation("TaskCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  assignee    User?     @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  project     Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  comments    Comment[]
  attachments Attachment[]
  
  @@map("tasks")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?  @default("#3B82F6")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  tasks       Task[]
  
  @@map("projects")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Foreign Keys
  taskId    String
  userId    String
  
  // Relations
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("comments")
}

model Attachment {
  id        String   @id @default(cuid())
  filename  String
  url       String
  size      Int
  mimeType  String
  createdAt DateTime @default(now())
  
  // Foreign Keys
  taskId    String
  
  // Relations
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@map("attachments")
}

enum Role {
  ADMIN
  MANAGER
  MEMBER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}